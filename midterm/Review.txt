1. Intro To Java
Know Java & OOD terminology/ideas:
  field
    holds the member variables of the class
  method
    the member functions associated with the class
  public
    member fields/methods allowed to be invoked outside of the class
  private
    member fields/methods only available within the class
  constructor
    used to instantiate the class and provide initial field values
  one name per item (argument matches fields)
    more intuitive to read because they mean the same thing (value and contextually)
  accessor
    methods that expose private class fields
  mutators
    methods that mutate/modify private class fields
  classes
    an object that holds its respective constructor, fields, methods, etc, and has a purpose
    ie. a class named StudentList will most likely have an array of students as a member field
    and have accessors to return the list or a single student
  objects
    a data type that inherits from Object and thus has access to Object methods
  instantiating objects
    creating a new type Object and holding a reference to it
  object references
    instead of instantiating a new object, variables can reference the same object and they
    can all operate on the one object
  basics idea of a class's package
    packages are code that can be imported to a class and provide extra features
  main()
    the first function that is ran when running the Java program
  JavaDoc (for class-level comment)
    provides a documentation on a class' purpose and
  static methods and static fields
    can be accessed without instantiating the class
  access rules
    static methods cannot access non-static fields/members
    * non-static methods can access static fields/members
  basic exceptions
    some functions throw Exceptions of different types ie. NullPointerExceptino
    throw custom Exception
  Know Java primitive types, promotion, demotion, casting, constants.
    primitives: Long, Float, Integer, Char, etc
    promotion: going from a smaller primitive to a larger primitive ie. Integer to Float
    demotion: vice versa, Double -> Integer
    casting: explicitly convert a data type to something else ie. (char) <someInt>
  Know Java's memory management (basic idea of garbage collection)
    unreferenced objects will be cleaned up
    some need to be closed ie. File readers or else memory leak
  Know how method parameters work with primitive and object types (pass by....)
    passing primitives will be pass by value (create new primitive)
    objects will default to pass by reference
  Know how to work with a Java array: create, access, get size, pass to method.
    create: Type[] arr = new Type[size];
    access: arr[index]
    get size: arr.length
    pass to method: func(Type[] arr)
    Notes:
      Work with one data type
      fixed in size
      throws exception when out of range
  Know ArrayList: how to create, add, remove, get size, get element
    create: List<Type> arr = new ArrayList<>();
    add: arr.add(element)
    get size: arr.size()
    remove: arr.remove(index)
    get element: arr.get(index)
  Know for-each loop structure.
    for (<Type> var : arr) {...}
  Know String: create, immutable, access a character,
  concatenation, operator overloading, get length, equals() vs ==.
    create: String str = ""
    Strings are immutable, if you have to mutate, they create a new String object
    multiple ways to access: by bracket index [], charAt(index) for starters
    concatenation: str.concat(someStr) returns new concatenated string
    operator overloading: only allowed on String +, +=
    get length: str.length()
    equals(): returns true or false if a string is equal to another string
    ==: tests if the string references are equal
  Know how to parse a string to an int
    Integer.parseInt(str)
  Know how to print to the screen, and read form the keyboard (Scanner).
    System.out.println(str)
    Scanner s = new Scanner(System.in)
      s.next() // returns string
  Understand reading complete lines and working with whitespace.
    s.nextLine(): will read the full line
    s.hasNextLine(): will test if there is a new line
  Understand closing a scanner.
    Do not need to close a scanner constructed with System.in
  Understand files, and working with scanner on a file.
    new File(filepath): refers to the file at the filepath
    new PrintWriter(file): creates a class able to write to the file
      make sure to close PrintWriter: (PrintWriter) writer.close()
    new Scanner(file): is able to take the file contents and handle similar to input
      ie. hasNextLine(), nextLine() works as expected
  Know basic try/catch and exceptions.
    try {
      // some code
    } catch (someExceptionType e) {
      // handle the exception
    }
  Know what is a static factory method, and how to use one.
    SFM: simple a static method that returns an instance of a class
    Naive ex:
      class SomeClass {
        // private fields
        private SomeClass(...args) {
          // private constructor
          // assign fields
        }
        public static SomeClass createWithXParams(...args) {
          return new SomeClass(...mutatedArgs)
        }
      }

      // invoke later
      SomeClass foo = SomeClass.createWithXParams(...args)
  Know what is clean code, and understand use of a coding standard/style guide.
    clean code: proper spacing, indents, comprehensible naming scheme, consistent
      layout of properties (class fields, where each type of methods go, etc), file/folder
      structure
    Purpose: maintainable, friendly to understand for other developers, good practice,
      improve efficiency in dev env, improve performance in build
  Do not need to memorize the course's coding style guide, but should know the
  basics of what is expected in terms of writing clean code.

2. Anon classes
  If given an interface, know how to instantiate anonymous classes/objects and use those, such as how the Strategy pattern is used.

  Know how to pass a Java program command line arguments from the command line,
  and how to receive and process them in a Java program. Don’t need to memorize the
  folder you have to be into run it.
    java class: java someProgram.class arg1 arg2
    jar file: java -jar someProgram.jar arg1 arg2
    parse: in main(), the string array argument that is passed in is tokenized and each arg is an element
  Know how to print to the screen (i.e., System.out) using print(), println(), and printf()
    System.out.print(str)
    System.out.println(str)
    System.out.printf(strThatIncludesAConversionSpecifier, [respectiveValues])
  Know conversion specifiers:
    %d: int,
    %x: hex,
    %f: float,
    %s: string,
    %b: bool,
    %n: newline,
  Know formatting with columns, and with commas.
    *
  Understand the wrapper classes for primitives; know Integer.
    Allow autoboxing, unboxing
    primitive -> object and vice versa
  File:
    Know purpose of File class and understand methods shown in slides.
      File class works with file paths
    Know what a Java interface is.
      Different classes can implement an Interface to fulfil a purpose in their own way
      ie. a Fly and a Telemarketer are not related but they can both implement an Interface that has
        a function, `pester` and implement that in their own way
    Understand how to use the FileFilter interface.
      Given the interface, be able to apply it by creating a named class, or an
      anonymous class.
        named class:
          Class A implements FileFilter {
            @Override
            public static boolean accept(File file) {
              return file.getName().endsWith('.txt')
            }
          }

          FileFilter namedClass = new A()

        anonymous class:
          FileFilter anonClass = new FileFilter() {
            @Override
            public static boolean accept(File file) {
              return file.getName().endsWith('.txt')
            }
          }
      Able to use a named object, or an anonymous object for listFiles().
        named/anon:
          Files[] fileList = folder.listFiles(fileFilter)
        lambda:
          Files[] fileList = folder.listFiles((f) -> f.getName().endsWith('.txt'))
      Know the syntax for each option.
  Comparable:
    Know the purpose of the Comparable interface.
      allow elements to be sorted using the Collections objects .sort()
    If given the interface, able to use it with Collections.sort() using
    named/anonymous objects/classes
      each element must implement the compareTo() method from Comparable using @Override

      * named class:
        class Type implements Comparable<Type> {
          // ...fields
          // ...methods

          @Override
          public int compareTo(Type other) {
            // return some comparison
          }
        }

        List<Type> arr = new ArrayList<>()

        Java.utils.Collections.sort(arr) // sort now uses the overriden method compareTo

      anonymous class:
        Type t = new Type() {
          @Override
          public int compareTo(Type other) {
            // return some comparison
          }
        }

        List<Type> arr = new ArrayList<>()

        Java.utils.Collections.sort(arr)
  Comparator
    Know the purpose of the Comparator interface.
      purpose: multiple criteria for sorting using two objects
    If given the interface, able to use it with Collections.sort() using
    named/anonymous objects/classes

    named:
      // note this is not Type, but a new class for Comparator
      class TypeComparator implements Comparator<Type> {
        // ...contents
        @Override
        public int compare(Type t1, Type t2) {
          // return some comparison between t1 and t2
        }
      }

      List<Type> arr = new ArrayList<>()

      Collections.sort(arr, new TypeComparator<Type>()) // note the additional arg

    anonymous:
      List<Type> arr = new ArrayList()
      Collections.sort(arr, new Comparator<Type>() {
        @Override
        public int compare(Type t1, Type t2) {
          // return some comparison between t1 and t2
        }
      })

  Understand the Strategy pattern as it applies to examples we saw in lecture.
    Purpose: Strategy pattern allows programs to change algorithms in runtime
      based on the situation

3. OOD Design Process
  Know terminology: OOD, OOP, Domain, (OOPS optional :) )
  Understand 3 phases: Analysis, Design, Implementation
    Know goal, process, and products of each
    Know why design is a “wicked”, sloppy, and heuristic process.
    Know what skeleton code is. Know continuous vs big-bang integration.
  Class Design:
    Know terms: class, object, state, behaviour, identity, instance
  Able to identify classes via finding nouns, identifying utility classes, systems, and
  agents.
  Understand when to, and when not to use String
  Know enums (able to create, use, and explain benefits)
  Able to assign responsibilities to classes (verbs)
    Able to work through tradeoffs of assigning functionality into classes.
  Class Relationships
    Know dependency, how to explain it, how to identify it. Know coupling.
    Know aggregation, how to explain it, how to identify it.
    Know inheritance

4. OOD Design Techniques
  Use Cases
    Know their purpose; able to identify tasks for which to create use cases.
    Able to write a use case, including variations as needed.
  CRC Cards
    Know their full name, their purpose, and how to create them.
    Know their limitation.
  UML Class Diagram
    Know its purpose.
    Know how to draw one including:
    3 sections, methods, fields
    relationships: dependency, aggregation, inheritance (class “is-a” and interface
    “implements”)
    how to indicate an interface
    how to indicate the multiplicity of aggregation connections (Ex: 1, 0..1, *)
    add a comment to a diagram
    show objects
  Know how to provide different levels of detail in a UML class diagram such as:
    Just the class names and relationships
    Class name with field and method names with visibility modifiers
    All names, relationships, and type information

5. Class Design
  Able to consider class design alternatives
    Understand ideas behind the three different Day class implementations.
    Know what deprecated means
  Encapsulation
    Know benefit of encapsulation, able to give a definition for it.
    Able to recognize when it's violated.
    Know immutable: how to recognize it, how to code it, benefit of it.
      Understand shared reference problem, and why clone() can be used to solve it.
    Know the meaning of a final variable, and what it prevents from changing.
  Understand and able to apply the command/query separation guideline.
    Know what a command and query are.
  Know iterators, their purpose, and be able to use them.
    Able to explain how it violates command/query guideline. Understand how this can lead to problems.
    Know what a side effect is
  Know purpose and use of Iterable
    If given the interface, able to create and use an Iterable class.
    Able to create functions in a class which return an anonymous Iterable object;
    understand why you might want to.
    If given the Collections.unmodifiableCollection() prototype, able to
    make and use an unmodifiable collection; know why we'd want to.
    If given the Iterator interface, able to create a simple custom iterator.
    Understand class relationships for a system using Iterable and Iterator

6. Interface Quality
  Know two perspectives of looking at a class.
  Know the four ways of analyzing public interface quality:
    Know cohesion.
      Know the single responsibility principle
      Able to apply these ideas to improve a class design.
    Know completeness (convenience).
      Able to recognize when an interface is incomplete.
    Know clarity: intention revealing names, meaningful abstractions.
    Know consistency: able to identify and correct inconsistent features of an
    interface.
  Know the 5 “other ways to review quality”.
  Able to use these ideas to critique code.

7. Contract vs Defensive
  Know programming by contract
    Able to give a definition for it, recognize it, and explain it.
    Know how it assigns responsibility for correctness,
    Know what are preconditions, postconditions,
  Know defensive programming
    Know how it assigns responsibility for maintaining a consistent state in an object,
    Know asserts and how to use them for defensive programming.
  Understand all the stated ways of handling errors.
  Know asserts
    What they are, how to write them
    Know when to use them, and when not to use them.
    Understand how to enable them in the JVM
    Understand the limitations of asserts
